from kubernetes import client, config
from kubernetes.client.rest import ApiException
from collections import defaultdict
from pint        import UnitRegistry
from prometheus_api_client import PrometheusConnect
import subprocess
import operator
import os
import math
import pandas as pd
import requests

timeout=30

def getControllerMasterIPCluster(cluster):
    config.load_kube_config()
    api_instance = client.CoreV1Api(api_client=config.new_client_from_config(context=cluster))
    #api_instance = kubernetes.client.CoreV1Api()
    master_ip = ""
    try:
        nodes = api_instance.list_node(pretty=True, _request_timeout=timeout)
        nodes = [node for node in nodes.items if
                 'node-role.kubernetes.io/master' in node.metadata.labels]
        # get all addresses of the master
        addresses = nodes[0].status.addresses

        master_ip = [i.address for i in addresses if i.type == "InternalIP"][0]
    except:
        print("Connection timeout after " + str(timeout) + " seconds to host cluster")

    return master_ip

def getControllerMasterIP():
    # TO DO: Specify cluster 0
    config.load_kube_config()
    #api = client.CoreV1Api(api_client=config.new_client_from_config(context="cluster0"))
    api = client.CoreV1Api()
    master_ip = ""
    try:
        nodes = api.list_node(pretty=True, _request_timeout=timeout)
        nodes = [node for node in nodes.items if
                 'node-role.kubernetes.io/master' in node.metadata.labels]
        # get all addresses of the master
        addresses = nodes[0].status.addresses

        master_ip = [i.address for i in addresses if i.type == "InternalIP"][0]
    except:
        print("Connection timeout after " + str(timeout) + " seconds to host cluster")

    return master_ip


def getresources(mode,cluster):
    total=0
    cp=getControllerMasterIPCluster(cluster)
    prom_host = getControllerMasterIP()
    prom_port = 30090
    prom_url = "http://" + str(prom_host) + ":" + str(prom_port)
    api_url =  prom_url + "/api/v1/status/config"
    r = requests.get(url=api_url)
    print(r.text)
    # data = r.json()
    # nomaster=str(prom_host) +":9100"
    # scrapeurl = []
    # for item in data["data"]["activeTargets"]:
    #     #print(item)
    #     if item["labels"]["cluster_name"] == cluster:
    #         print(item)
        #     if item["labels"]["instance"] != nomaster:

        #         scrapeurl.append(item["scrapeUrl"])









    #print(response.text)
    print(api_url)
    pc = PrometheusConnect(url=prom_url, disable_ssl=True)
    if mode == "CPU" or mode == 'cpu':
        #different
        query="(sum(increase(node_cpu_seconds_total{cluster_name=\"" + cluster + "\",mode=\"idle\"}[120s]))by (instance)/sum(increase(node_cpu_seconds_total{cluster_name=\"" + cluster + "\"}[120s]))by (instance))*100"
        #query="100-(instance:node_cpu:ratio{cluster_name=\"" + cluster + "\"}*100)"
        #print(query)
        result = pc.custom_query(query=query)
        if len(result) > 0:
            for node in result:
                print(node)
                ip=str(node['metric']['instance']).split(":")
                if ip[0]!=cp:
                    #checkdict[ip[0]]=float((node['value'][1]))
                    total+=float((node['value'][1]))
                    #plist.append(ip[0])
                
    elif mode == "Memory" or mode == 'memory':
        query="node_memory_MemAvailable_bytes{cluster_name=\"" + cluster+ "\"}"
        #print(query)
        result = pc.custom_query(query=query)
        if len(result) > 0:
            for node in result:
                #print(node)
                ip=str(node['metric']['instance']).split(":")
                if ip[0]!=cp:
                    total+=float((node['value'][1]))
                    #print(node)
                    #print(float((node['value'][1])))
                    #print(total)
            #print(total)
    else:
        print("Please input cpu or Memory")
    
    return float(total)

print(getresources("cpu","cluster1"))